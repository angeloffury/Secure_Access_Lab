import boto3
import aws
import duo
import secure_access
import os
import random

from dotenv import load_dotenv
load_dotenv()
aws_access_key_id,aws_secret_access_key, region_name= os.environ.get('aws_access_key_id'), os.environ.get('aws_secret_access_key'), os.environ.get('region_name')
ikey,skey,hostname= os.environ.get('ikey'), os.environ.get('skey'),os.environ.get('hostname')
total_clients=int(os.environ.get('total_clients'))
session = boto3.Session(aws_access_key_id = aws_access_key_id,aws_secret_access_key=aws_secret_access_key, region_name=region_name)


ec2_client = session.client("ec2")

def main():
    option=-1
    while option!= None:
        print ()
        print('*'*100,"\n") 
        print("[1]Delete Duo Bypass codes & reset AWS client machines ")
        print("[2]Delete Duo Bypass codes")
        print("[3]Reset AWS clients machines")
        print("[4]Set new Duo bypass code ")
        print("[5]Start AWS client machines ")
        print("[6]Create new Golden Snapshots of AWS client machines")
        print("[7]Set Secure Access Lab Admins to Read-only")
        print("[8]Clean up Secure Access Dashboard rules [except Web Profile & DLP]")
        print("[9]Set Secure Access Lab Admins to Read-write")
        print("[0]Exit")
        selection=input("Select any option number :" )
        while (not selection.isdigit()) or (int(selection) >9)  or (int(selection) <0) :
            print("\nInvalid option. Try again!")
            selection=input("Select any option number :" )
        option= int(selection) 

        if option==0:
            option=None

        elif option==1 or option==2:
            print("\t",'='*100) 
            # Delete Duo Bypass codes
            users= duo.get_all_users(hostname,skey,ikey)
            all_bypass_codes=duo.get_bypass_codes(users, hostname,skey,ikey)
            duo.delete_bypass_codes(all_bypass_codes, hostname, skey, ikey)
            if(option ==1):
                #Reset AWS client machines
                reset_aws=input("\n\t\tAre you sure you want to reset the AWS client machines? [y/n]: ")
                if reset_aws=='y'or reset_aws=='Y':
                    i,aws_clients=1,[]
                    print("\t",'='*100) 
                    while i <=total_clients:
                        aws_clients.append("win11-client"+str(i))
                        i+=1
                    lab_ec2_instances=aws.get_ec2_instances(ec2_client, aws_clients)
                    stop_status= aws.stop_ec2_instances(ec2_client, lab_ec2_instances)
                    print()
                    volumeIds= aws.reset_ec2_volumes(ec2_client, lab_ec2_instances)

        elif option==3:
            #Reset AWS client machines
            i,aws_clients=1,[]
            print("\t",'='*100) 
            while i <=total_clients:
                aws_clients.append("win11-client"+str(i))
                i+=1
            lab_ec2_instances=aws.get_ec2_instances(ec2_client, aws_clients)
            stop_status= aws.stop_ec2_instances(ec2_client, lab_ec2_instances)
            print()
            volumeIds= aws.reset_ec2_volumes(ec2_client, lab_ec2_instances)


        elif option==4:
            # Set new Duo Bypass code
            bypass_code=input("\tEnter a 9-digit Duo MFA bypass code [or] Press enter to system-generate a bypass code :")
            if len(bypass_code) <9:
                bypass_code = random.randint(100000000, 999999999)
                print("\tSystem generated Duo bypass code:", bypass_code)
            users= duo.get_all_users(hostname,skey,ikey)
            duo.set_bypass_codes(users, hostname, skey, ikey,bypass_code)
            
        elif option==5:
            #Start AWS client machines
            i,aws_clients=1,[]
            print("\t",'='*100) 
            inp= input("\tEnter number of clients to start [1-"+str(total_clients)+"]:")
            if (not inp.isdigit()) or int(inp) > total_clients or int(inp) <1:
                print("\tInvalid Entry ! No Clients were started")
            else:
                while i <=int(inp):
                    aws_clients.append("win11-client"+str(i))
                    i+=1 
                lab_ec2_instances=aws.get_ec2_instances(ec2_client, aws_clients)
                start_status = aws.start_ec2_instances(ec2_client, lab_ec2_instances)

        elif option==6:
            #Create new Golden Snapshots of AWS client machines
            i=1
            print("\t",'='*100) 
            while i <=total_clients:
                snapshot_name="win11-client"+str(i)+"-golden"
                aws_client_name="win11-client"+str(i)
                print("\n\tTrying to delete Snapshot of",snapshot_name)
                aws.delete_snapshot_by_name(ec2_client,snapshot_name)
                volumeId= aws.get_volume_ids_by_ec2_name(ec2_client,aws_client_name)
                lab_ec2_instances=aws.get_ec2_instances(ec2_client, [aws_client_name])
                print("\tStopping", aws_client_name , "before Snapshot creation")
                aws.stop_ec2_instances(ec2_client, lab_ec2_instances)
                print("\tTrying to create new Golden snapshot of", aws_client_name, volumeId)
                aws.create_snapshot(ec2_client,volumeId,snapshot_name,snapshot_name)
                i+=1

        elif option==7:
            # Set Secure Access Lab Admins to Read-only
            secure_access.set_clients_to_read_only()
            #secure_access.create_full_admin("4")

        elif option ==8:
            # Clean up Secure Access Dashboard rules [except DLP]
            print ("\n\tClient's Access Policy Rules:")
            rules = secure_access.get_all_access_rules()
            if rules!= None:
                secure_access.filter_client_access_rules(rules)
            print("\n\tClient's Private resources:")
            secure_access.delete_client_private_resources()
            print("\n\tClient's Private resource Groups:")
            secure_access.delete_client_private_resource_groups()
            print("\n\tClient's Endpoint Posture Profile:")
            posture_profiles = secure_access.get_all_posture_profiles_v1()
            if(posture_profiles!= None):
                secure_access.delete_posture_profile_v1(posture_profiles)
            print("\n\tClient's Destination Lists:")
            destination_lists=secure_access.get_all_destination_lists()
            if(destination_lists!=None):
                secure_access.delete_destination_lists(destination_lists)
            print("\n\tClient's Roaming devices:")
            roaming_devices=secure_access.get_all_roaming_devices()
            if(roaming_devices!=None):
                secure_access.delete_roaming_devices(roaming_devices)
            
            print("\n\n\t-------- NEED MANUAL INTERVENTION --------")
            print("\tSince there are NO APIs available, kindly delete the below parts in the Secure Access Admin Dashboard")
            print("\n\t 1.Delete Web Profiles (Secure > Profiles > Web Profiles)")
            print("\t 2.Delete Data Loss Prevention Policies ( Secure > Policy > Data Loss Prevention Policy)")

            
        elif option ==9:
            # Set Secure Access Lab Admins to Read-write
            secure_access.set_clients_to_full_admin()
        else:
            option=-1

   
if __name__ == "__main__":
    main()